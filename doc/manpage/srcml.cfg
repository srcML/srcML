% SRCML(1) srcml ${CLIENT_VERSION} | srcml

# NAME

**srcml** - Conversion of source code to/from the srcML format, querying and manipulation of srcML

# SYNOPSIS

`srcml` \[[general-options\]][GENERAL OPTIONS] \[[srcML-options\]][CREATING SRCML] \[[transformations\]][TRANSFORMATIONS] \[[output-src-options\]][EXTRACTING SOURCE CODE] \[input\] \[output\]


# DESCRIPTION

The program `srcml` supports the srcML format. The srcML format
presents an XML view of source code for addressing, querying, and transformation.
The tool translates source code into the XML source-code representation
srcML, where standard XML tools, available directly from the `srcml` program,
can query and transform the srcML. The tool can then convert the srcML back to
source code. 

The srcML format preserves all text of the source code,
including white-space, comments, and preprocessor statements. The C Preprocessor
is not run on the source code. The program works on large projects, individual
source-code files, or code fragments, including individual statements.

The conversion to the srcML format uses a custom parser that is fast and
tolerant to incomplete source code and uncompilable code.

Use of the character '-' in the place of an input file, or providing no input
file, implies reading from standard input. A source-code language must be specified
when source-code input is from standard input.

# GENERAL OPTIONS

`-${HELP_FLAG_SHORT}`, `--${HELP_FLAG_LONG}`
: Output the help and exit.

`-${VERSION_FLAG_SHORT}`, `--${VERSION_FLAG_LONG}`
: Output the version of `srcml` then exit.

`-${VERBOSE_FLAG_SHORT}`, `--${VERBOSE_FLAG_LONG}`
: Conversion and status information to stderr, including encodings
used. Especially useful with for monitoring progress of the option `--${FILES_FROM_LONG}`,
a directory, or source-code archive (e.g., tar.gz).

`-${QUIET_FLAG_SHORT}`, `--${QUIET_FLAG_LONG}`
: Suppresses status messages.

`-${OUTPUT_FLAG_SHORT}` _file_, `--${OUTPUT_FLAG_LONG}`=_file_
: Write the output to _file_. By default, it writes to standard output.

`-${JOBS_FLAG_SHORT}` _num_, `--${JOBS_FLAG_LONG}`=_num_
: Allow up to _num_ threads for source parsing. Default is 4.

# CREATING SRCML

The following options are to create srcML. The format of the
input affects the format of the output unless otherwise specified.
If the input is source-code files, then the output is expected to be
in srcML format. If the input is in srcML format, then the output is
in source-code format.

`-${TEXT_FLAG_SHORT}` _text_, `--${TEXT_FLAG_LONG}`=_text_
: Input the _text_ string as source code.
Useful for short text input. Common escape sequences in C and echo are
expanded, including \n, \t, \a, \b, \v, \e \xHH where H is 1 to 2 hex values,
and \NNN and \0NNN where N is 1 to 3 octal digits.

`--${FILES_FROM_LONG}`=_file_
: Treat the input _file_ as a list of source files.
Each file is separately translated and collectively stored into a
single srcML archive. The list has a single filename on each line.
Ignored lines include blank lines and lines that begin with the character '\#'.
As with input and output files, using the character '-' in place of a file name takes the input
list from standard input.

`-${LANGUAGE_FLAG_SHORT}` _language_, `--${LANGUAGE_FLAG_LONG}`=_language_
: Set the programming language of the input source code. Allowable values are
C, C++, C\#, and Java. The language affects parsing, the allowed
markup, and what is considered a keyword. The value is also stored
individually as an attribute in each unit. If the input is a directory 
or source-code archive (e.g., .tar.gz, .zip), the language only applies to files with source-code extensions.
Use --${REGISTER_EXTENSION_FLAG_LONG} to register non-standard source-code extensions.

If not specified, the programming language is based on the file
extension. Language must be specified if using standard input. If the
file extension is not available or not in the standard list, then the
program will skip that file. This allows you to run `srcml` on a
project directory with source and non-source files, where `srcml`
only parses files with supported extensions.

`--${REGISTER_EXTENSION_FLAG_LONG}` _extension_=_language_
: Set the file _extension_ map to a given _language_. Note
that the extensions do not contain the period character '.', e.g., `--register-ext "h=C++"`

A common use is C++ files that use the .h extension for header
files. By default, these are processed as C source-code files. This
option can be used to override this behavior.

`--${SRC_ENCODING_FLAG_LONG}`=_encoding_
: Use the _encoding_ when processing the input source-code file. The
default is to try to automatically determine this when possible, i.e., ISO-8859-1 is assumed
unless a non-character is detected. Encodings include "UTF-16", "ISO-10646-UCS-2",
and "ISO-8859-1". On UNIX platforms, a full list of encodings can be obtained by using the command `iconv -l`.

`--${EOL_FLAG_LONG}`=_eol_
: Use the _eol_ for output of source code. Allowable values are the default `auto`, 'UNIX' or linefeed `lf`,
carriage return `cr`, and 'Windows' or carriage return, linefeed `crlf`. In most cases the default
`auto` is sufficient.

`-${ARCHIVE_FLAG_SHORT}`, `--${ARCHIVE_FLAG_LONG}`
: Create a srcML archive, which can contain multiple files in the srcML
format. Default when provided more than one file or a directory as
input.

The following options control how and when the output format is srcML. In most cases,
the output will be in the proper format, but these allow you to specify.

`-${OUTPUT_XML_FLAG_SHORT}`,`--${OUTPUT_XML_FLAG_LONG}`
: Output srcML as complete and valid XML. 
The default when the input is source code or files containing source code.

`-${OUTPUT_XML_FRAGMENT_FLAG_LONG}`
: Output the inner (inside the unit tag) of the srcML. This does not include
any namespaces or attributes on the archive root element, and is technically not valid XML.

`-${OUTPUT_XML_RAW_FLAG_LONG}`
: Output the XML inside of the srcML unit element. This is not valid XML as it contains no
namespace declarations and does not necessarily have a single root element.

## Examples

srcml --text="a;" -l C++ --output-srcml-outer

```<unit revision="1.0.0" language="C++"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></unit>```

srcml --text="a;" -l C++ --output-srcml-inner

```<expr_stmt><expr><name>a</name></expr>;</expr_stmt>```

## MARKUP OPTIONS

Optional line and column attributes are used to indicate the position of
an element in the original source code. Both the line and
column start at 1. The column position is based on the tab settings with
a default tab size of 8. Other tab sizes can be set using the
${TABS_FLAG}.

`--${POSITION_FLAG_LONG}`
: Insert attributes for the start (line and column) and end (line and column) of an element in the start tag. These attributes have a default prefix of
"${SRCML_EXT_POSITION_NS_PREFIX_DEFAULT}" in the namespace
"${SRCML_EXT_POSITION_NS_URL}", e.g., `<class pos:start="15,1" pos:end="25,2">`

`--${TABS_FLAG}`=_tabsize_
: Set the tab size. Default is 8. Use of this option automatically
turns on the position attributes.

This set of options allows control over how preprocessing regions are
handled, i.e., whether parsing and markup occur. In all cases the source
is preserved.

`--${CPP_FLAG_LONG}`
: Turn on parsing and markup of preprocessor statements in non-C/C++
languages such as Java. Can also be enabled by defining a prefix for
this cpp namespace URL, e.g., `--${XMLNS_FLAG}:${SRCML_CPP_NS_PREFIX_DEFAULT}="${SRCML_CPP_NS_URL}"`.

`--${CPP_MARKUP_IF0_FLAG_LONG}`
: Markup \#if 0 regions. The default is to preserve the source code
in these regions, without any markup. This option indicates that the \#if 0 regions 
should be treated as source code, and marked up accordingly.

`--${CPP_NO_MARKUP_ELSE_FLAG_LONG}`
: Only place source code in \#else and \#elif regions, leaving out markup.
The default is to markup these regions.

## XML FORMAT

The following options control the format of the XML.

`--${XML_ENCODING_FLAG_LONG}`=_encoding_
: Use the encoding for the output srcML file. The
default is UTF-8. Possible encodings can be obtained by using the
command `iconv -l` on UNIX platforms. The encoding is stored on the XML declaration.

`--${NO_XML_DECL_LONG}`
: Do not output the default XML declaration. Useful when the output is
to be placed inside another XML document.

The following options can be used to change the prefixes.
Each extensions to the srcML markup has its own namespace. These are
indicated in the srcML document by the declaration of the specific
extension namespace. These flags make it easier to declare, and are
an alternative way to turn on options by declaring the URL for an option.

`--${XMLNS_FLAG}`=_url_
: Set the _url_ for the default namespace. The predefined URL is:

    `--${XMLNS_FLAG}=${SRCML_SRC_NS_URL}`

`--${XMLNS_FLAG}:`_prefix_=_url_
: Set the namespace prefix PREFIX for the namespace URL.
There is a set of standard URLs for the elements in srcML, each with a
predefined prefix. The predefined URLs and prefixes are:

    `--${XMLNS_FLAG}:${SRCML_CPP_NS_PREFIX_DEFAULT}=${SRCML_CPP_NS_URL}`  
    `--${XMLNS_FLAG}:${SRCML_EXT_POSITION_NS_PREFIX_DEFAULT}=${SRCML_EXT_POSITION_NS_URL}`

## METADATA OPTIONS

This set of options allows view and control over various metadata in srcML.

The following options allow viewing various metadata stored in the
srcML document.

`-${LIST_FLAG_SHORT}`, `--${LIST_FLAG_LONG}`
: List all the files in the srcML archive, then exit.
archive, then exit.

`-${INFO_FLAG_SHORT}`, `--${INFO_FLAG_LONG}`
: Display most metadata, except the unit count (file count) in a srcML
archive, then exit.

`-${FULL_INFO_FLAG_SHORT}`, `--${FULL_INFO_FLAG_LONG}`
: Display most metadata including the unit (file) count in a srcML archive,
then exit.

`--${SHOW_LANGUAGE_FLAG_LONG}`
: Display language and exit.

`--${SHOW_URL_FLAG_LONG}`
: Display URL of the root element and exit.

`--${SHOW_FILENAME_FLAG_LONG}`
: Display the filename and exit.

`--${SHOW_SRC_VERSION_FLAG_LONG}`
: Display the source-code version attribute and exit.

`--${SHOW_TIMESTAMP_FLAG_LONG}`
: Display the timestamp attribute and exit.

`--${SHOW_HASH_FLAG_LONG}`
: Display the hash value and exit.

`--${SHOW_ENCODING_FLAG_LONG}`
: Display the XML encoding and exit.

`--${SHOW_UNIT_COUNT_FLAG_LONG}`
: Display the unit count and exit.

`--${PREFIX_FLAG_LONG}`=_url_
: Display a prefix given by a _url_ and exit.

The following options allow the user to control the attributes:

`-${FILENAME_FLAG_SHORT}` _filename_, `--${FILENAME_FLAG_LONG}`=_filename_
: The value of the filename attribute is typically obtained from the input
filename. This option allows you to specify a different filename for
standard input or where the filename is not contained in the input path.

`--${URL_FLAG_LONG}`=_url_
: The url attribute on the root element can be defined. This is purely
descriptive and has no interpretation by `srcml`. It is useful for specifying
a directory or defining the source protocol.

`-${SRCVERSION_FLAG_SHORT}` _version_, `--${SRCVERSION_FLAG_LONG}`=_version_
: Set the value of the attribute version to version. This is a
purely-descriptive attribute, where the value has no interpretation by
`srcml`. The attribute is applied to the root element, and in the case
of a srcML archive, it is also applied to each unit in the archive.

`--${HASH_FLAG_LONG}`
: The value of the hash attribute is a SHA-1 hash generated based on
the contents of the source-code file. This is enabled by default when
working with srcML archives.

`--${TIMESTAMP_FLAG_LONG}`
: Set the timestamp of the output srcML file to the last modified
time of the input source-code archive. This is the
last modified time based on the archive files.

## EXAMPLES

srcml input.cpp
: Create a srcML unit from input.cpp, using C++ parsing rules,
and output to standard out.

echo "int a;" | srcml -${LANGUAGE_FLAG_SHORT} C++
: Create a srcML unit from standard input, using C++ parsing rules,
and output to standard out.

srcml --text="int a;\n" -${LANGUAGE_FLAG_SHORT} C++
: Create a srcML unit from the expanded text, using C++ parsing rules,
and output to standard out.

srcml dir.xml --${SHOW_UNIT_COUNT_FLAG_LONG}
: Create a srcML archive from all files contained in the dir directory, using
their extensions to determine the markup parsing rules, and
output the number of units contained in the archive to standard out.

srcml input.java --${CPP_FLAG_LONG}
: Create a srcML unit from input.java, using Java parsing
rules as well as C++ parsing rules for preprocessor directives.

## EXTRACTING SOURCE CODE

The following describe options that are only applicable for when
the output is in source-code format.

`-${UNIT_OPTION_SHORT}` _n_, `--${UNIT_OPTION_LONG}` _n_
: Extract individual _n_-th unit from srcML archive.

`-${OUTPUT_SRC_FLAG_SHORT}`, `--${OUTPUT_SRC_FLAG_LONG}`
: Output source code. This is the default when the input
is in srcML.

`--${TO_DIR_FLAG_LONG}`=_directory_
: Extract all files from srcML and create them in the file system at
_directory>_

`-${NULL_SEPARATOR_SHORT}`, `--${NULL_SEPARATOR_LONG}`
: Separates each source code unit with an ASCII NULL ('\0')

## EXAMPLES

srcml dir/ -${OUTPUT_FLAG_SHORT} dir.xml
: Create a srcML archive from all files contained in the dir directory, using
their extensions to determine the markup parsing rules, and
write the resulting srcML archive to dir.xml.

srcml archive.xml --${TO_DIR_FLAG_LONG}=.
: Re-create all files based on the srcML units in archive.xml, using the current
directory as the root directory.

## TRANSFORMATIONS

`--${XPATH_OPTION_LONG}=`_expression_
: Query each individual unit using the XPath _expression_. Multiple XPath expression options allowed.

The default prefix cannot be used in XPath expressions. Element names must have a prefix, e.g., `src`, `cpp`, etc. Path from the root is required.

By default, the result is a srcML archive where each unit is a query result, marked with the original filename. As an alternative, the original srcML can be preserved with the query results marked with an attribute, wrapped with an element, or both. Note that the prefix and url used for the namespace
must be declared with the option `--${XMLNS_FLAG}:`.

`--${SRCQL_OPTION_LONG}=`_query_
: Query each individual unit using the srcQL _query_. Multiple srcQL query options allowed.

Very similar results to the XPath option `--${XPATH_OPTION_LONG}`.

srcQL queries are written in source-code fragments with the ability to match multiple instances using logical variables, e.g., all declaration statements are &apos;$T $V;&apos;.

On the command line, demark with single quotes to avoid bash expansion.

Unification is also supported, e.g., all functions with a parameter type that matches the return type are &apos;$T \$V(\$T)&apos;.

This is an experimental feature and only srcQL queries without verbs are allowed.

`--${ATTRIBUTE_LONG}` _prefix:name=value_
: Add the attribute _prefix:name="value"_ to every Xpath expression or srcQL query result.

`--${ELEMENT_LONG}` _prefix:name_
: Wrap every Xpath expression or srcQL query result with an element of the form _prefix:name_. May be mixed with `--${ATTRIBUTE_LONG}`.

`--${XSLT_LONG}` _file_|_url_
: Apply a transformation from an XSLT _file_ or _url_ to each individual unit.

`--${XSLT_PARAM}` _name_="_value_"
: Pass the string parameter _name_ with UTF-8 encoded string _value_ to the XSLT program

`--${RELAXNG_OPTION_LONG}`=_file_|_url_
: Output individual units that match the RELAXNG _file_ or _url_.


## EXAMPLES

srcml a.cpp --${XPATH_OPTION_LONG}="//src:name" --${ATTRIBUTE_LONG}="q:foo=test" --${XMLNS_FLAG}:q=mysite.net

: Convert a.cpp to srcML and add the attribute `q:foo=test` to all `src:name`
elements as found by the XPath query. Output the results to standard out.

srcml archive.xml --xpath "//src:unit/@filename"
: Execute the XPath query on archive.xml, outputting the filename attribute
of each unit in the archive to standard out.

## RETURN STATUS

${STATUS_SUCCESS}: Normal

${STATUS_ERROR}: General error

${STATUS_INTERNAL_ERROR}: Internal error

## CAVEATS

Translation is performed based on local information with no symbol
table. For non-CFG languages, i.e., C/C++, and with macros this may lead
to incorrect markup.

Line endings are normalized in XML formats including srcML.

## BUGS

Libxml2 directly supports many encodings beyond UTF-8, UTF-16, and
ISO-8859-1 through iconv. However, the BOM (Byte Order Mark) immediately
before the XML declaration may not be processed correctly by `srcml`
and by other libxml2-based tools (e.g., xmllint). Use the LE or BE
version of the encoding, e.g., UTF-32BE, UTF-32LE, instead.

Report bugs at Contact us at http://www.srcml.org/support.html

## AUTHORS

Written by Michael L. Collard, Michael Decker, Drew Guarnera, Brian Bartman, 
and Heather Michaud.

## COPYRIGHT

Copyright (C) 2013-2023 srcML, LLC. (www.srcML.org)

The srcML Toolkit is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The srcML Toolkit is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the srcML Toolkit; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
