<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" language="C#" url="typeof" filename="typeof">

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>()</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>()</argument_list></typeof> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><call><name>g</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><call><name>g</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><call><name>g</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></typeof> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><call><name>g</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></typeof> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></typeof> <operator>+</operator> <call><name>g</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>b</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>d</name></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><operator>(</operator><literal type="string">"a"</literal><operator>,</operator> <operator>(</operator><name>mAccWrapCreated</name><operator>-</operator><name>mAccWrapDeleted</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>(</operator><name>b</name><operator>,</operator><name>c</name><operator>)</operator></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>


<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name><operator>&amp;</operator></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></typeof></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></typeof> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></typeof></expr></argument>)</argument_list></typeof> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></typeof> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></typeof> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></typeof> <operator>+</operator> <typeof>typeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

<unit language="C#">
<expr_stmt><expr><typeof>typeof<argument_list>(<argument><expr>struct <name>x</name></expr></argument>)</argument_list></typeof></expr>;</expr_stmt>
</unit>

</unit>
