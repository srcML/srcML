<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="JavaScript" filename="script.js" url="function_types">
    <unit language="JavaScript">
    <comment type="block">/*Function Declaration*/</comment>
    <function>function <name>functionName</name><parameter_list>(<parameter><decl><name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// function body</comment>
    </block_content>}</block></function>

    <function>function <name>greet</name><parameter_list>(<parameter><decl><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="string">`Hello, ${name}!`</literal></expr>;</return>
    </block_content>}</block></function>
    </unit>

    <unit language="JavaScript">
        <comment type="block">/*Function Expression*/</comment>
        <decl_stmt><decl type="const">const <name>functionName2</name> <init>= <expr><lambda>function<parameter_list>(<parameter><decl><name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// function body</comment>
        </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>
    </unit>

    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>add</name> <init>= <expr><lambda>function<parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr>;</return>
        </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>
    </unit>

    <unit language="JavaScript">
    <comment type="block">/*Arrow Function*/</comment>
    <decl_stmt><decl type="const">const <name>functionName3</name> <init>= <expr><operator>(</operator><name>parameters</name><operator>)</operator> <operator>=&gt;</operator> <block>{
        <comment type="line">// function body</comment>
        }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl type="const">const <name>multiply</name> <init>= <expr><operator>(</operator><name>a</name></expr></init></decl>, <decl type="const"><name>b</name></decl></decl_stmt>) <expr_stmt><expr><operator>=&gt;</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>

    <decl_stmt><decl type="const">const <name>square</name> <init>= <expr><name>x</name> <operator>=&gt;</operator> <name>x</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
    </unit>

    <unit language="JavaScript">
        <comment type="block">/*Immediately Invoked Function Expression (IIFE)*/</comment>
        <expr_stmt><expr><operator>(</operator><lambda>function<parameter_list>(<parameter><decl><name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// function body</comment>
        </block_content>}</block></lambda></expr></expr_stmt>)<expr_stmt><expr><operator>(</operator><name>arguments</name><operator>)</operator></expr>;</expr_stmt>
    </unit>

    <unit language="JavaScript">
        <expr_stmt><expr><operator>(</operator><lambda>function<parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl type="const">const <name>message</name> <init>= <expr><literal type="string">'This is an IIFE'</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></expr_stmt>)<expr_stmt><expr><operator>(</operator><operator>)</operator></expr>;</expr_stmt> <comment type="line">// Output: This is an IIFE</comment>
    </unit>

    <unit language="JavaScript">
        <expr_stmt><expr><operator>(</operator><lambda>function<parameter_list>(<parameter><decl><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="string">`Hello, ${name}!`</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></expr_stmt>)<expr_stmt><expr><operator>(</operator><literal type="string">'Bob'</literal><operator>)</operator></expr>;</expr_stmt> <comment type="line">// Output: Hello, Bob!</comment>

    </unit>

    <unit language="JavaScript">
    <comment type="block">/*Generator Functions*/</comment>
    <function type="generator">function* <name>generatorFunction</name><parameter_list>(<parameter><decl><name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// function body</comment>
        <yield>yield <expr><name>value</name></expr>;</yield>
    </block_content>}</block></function>

    <function type="generator">function* <name>countUpTo</name><parameter_list>(<parameter><decl><name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl type="let">let <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator>)</expr> <block>{<block_content>
        <yield>yield <expr><name>i</name></expr>;</yield>
    </block_content>}</block></incr>
    }</control></for></block_content></block></function>
    </unit>

    <unit language="JavaScript">
        <comment type="block">/*Async Functions*/</comment>
        <macro><name>async</name></macro> <function>function <name>functionName</name><parameter_list>(<parameter><decl><name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// function body</comment>
    </block_content>}</block></function>

        <macro><name>async</name></macro> <function>function <name>fetchData</name><parameter_list>(<parameter><decl><name>url</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl type="const">const <name>response</name> <init>= <expr><name>await</name> <call><name>fetch</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl type="const">const <name>data</name> <init>= <expr><name>await</name> <call><name><name>response</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>data</name></expr>;</return>
        </block_content>}</block> <catch>catch (<name>error</name>) <block>{<block_content>
            <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">'Error:'</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
    </unit>

    <unit language="JavaScript">
    <comment type="block">/* Using the Function Constructor*/</comment>
    <decl_stmt><decl type="const">const <name>sum</name> <init>= <expr><operator>new</operator> <call><name>Function</name><argument_list>(<argument><expr><literal type="string">'a'</literal></expr></argument></argument_list></call></expr></init></decl>, <decl type="const">'b'</decl>, <decl type="const">'return a + b;'</decl></decl_stmt>)<empty_stmt>;</empty_stmt>

    <comment type="block">/*Nested Functions*/</comment>
        <function>function <name>outerFunction</name><parameter_list>(<parameter><decl><name>outerVariable</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <function>function <name>innerFunction</name><parameter_list>(<parameter><decl><name>innerVariable</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="string">`Outer Variable: ${outerVariable}`</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="string">`Inner Variable: ${innerVariable}`</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
            <return>return <expr><name>innerFunction</name></expr>;</return>
        </block_content>}</block></function>
    </unit>

    <unit language="JavaScript">
    <comment type="block">/*Default Parameters and Rest Parameters*/</comment>
    <function>function <name>greet</name><parameter_list>(<parameter><decl><name>name</name> <init>= <expr><literal type="string">'Guest'</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="string">`Hello, ${name}!`</literal></expr>;</return>
    </block_content>}</block></function>

    <function>function <name>sum2</name><parameter_list>(<parameter><decl><modifier>...</modifier><name>numbers</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>numbers</name><operator>.</operator><name>reduce</name></name><argument_list>(<argument><expr><operator>(</operator><name>acc</name><operator>,</operator> <name>curr</name>) <operator>=&gt;</operator> <name>acc</name> <operator>+</operator> <name>curr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    </unit>

    <unit language="JavaScript">
    <comment type="block">/*Higher-Order Functions*/</comment>
    <function>function <name>higherOrderFunction</name><parameter_list>(<parameter><decl><name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl type="const">const <name>result</name> <init>= <expr><call><name>callback</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function>function <name>square2</name><parameter_list>(<parameter><decl><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>x</name> <operator>*</operator> <name>x</name></expr>;</return>
    </block_content>}</block></function>

    <expr_stmt><expr><call><name>higherOrderFunction</name><argument_list>(<argument><expr><name>square2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Output: 25</comment>
    </unit>

    <unit language="JavaScript">
    <comment type="block">/*Callback Functions*/</comment>
    <function>function <name>fetchData3</name><parameter_list>(<parameter><decl><name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setTimeout</name><argument_list>(<argument><expr><operator>(</operator>) <operator>=&gt;</operator> <block>{
            <init><decl type="const">const <name>data</name> <init>= <expr><block>{ <expr><name>id</name><operator>:</operator> <literal type="number">1</literal></expr></block></expr></init></decl></init>, <decl type="const"><name>name</name><range>: <expr><literal type="string">'Eve'</literal></expr> }</range></decl>;
            <expr><call><name>callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;
            }</block></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function>function <name>displayData</name><parameter_list>(<parameter><decl><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="string">'Data received:'</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><call><name>fetchData3</name><argument_list>(<argument><expr><name>displayData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

</unit>
