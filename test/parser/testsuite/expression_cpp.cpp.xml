<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" language="C++" url="expression">

<unit language="C++">
<expr_stmt><expr><noexcept>noexcept</noexcept></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><noexcept>noexcept<argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></noexcept></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;*</operator><name>b</name></name></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>.*</operator><name>b</name></name></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><call><call><name>a</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><call><call><call><name>a</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><name>a</name> <operator>+</operator> <call><call><name>b</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><call><call><name>b</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><call><name>btVector3</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <block>{ <expr><literal type="number">0x0</literal></expr> }</block> <operator>^</operator> <name>b</name> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><call><name>foo</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><name>a</name><operator>*</operator><call><name><operator>::</operator><name>qPow</name></name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>t_adj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><operator>delete</operator><index>[]</index> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><name>b</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</unit>

<unit language="C++">
<expr_stmt><expr><call><name>b</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

</unit>
