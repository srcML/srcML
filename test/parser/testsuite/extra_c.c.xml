<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" language="C" url="extra" filename="extra_c">

<unit language="C">
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>a</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CFE_API_strlen</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>a</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>CFE_API_strlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C">
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>aurora_paranoia_check</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>tty</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"aurora_open"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AURORA_DEBUG</name></cpp:ifdef>
        <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
</block_content>}</block>
</unit>

<unit language="C">
<block>{<block_content>
<return>return <macro><name>snprintf</name> <argument_list>(<argument>buf</argument>, <argument>size</argument>,
         <argument>({ char *s;
                 switch (urb-&gt;dev-&gt;speed) {
                 case USB_SPEED_LOW:    s = <literal type="string">"ls"</literal>; break;
                 default:               s = <literal type="string">"?"</literal>; break;
                 }; s; })</argument>,
         <argument>urb-&gt;actual_length</argument>, <argument>urb-&gt;transfer_buffer_length</argument>)</argument_list></macro>;</return>
</block_content>}</block>
</unit>

<unit language="C">
<block>{<block_content>
    <switch>switch <condition>(<expr><call><name>IP_VS_FWD_METHOD</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    </block_content>}</block></switch>
</block_content>}</block>
</unit>

<unit language="C">
<if_stmt><if>if <condition>(<expr><call><name>a</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>
     <empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</unit>

<unit language="C">
<decl_stmt><decl><type><name>a</name></type> <name>b</name> <init>= <expr><block>{ <expr><block>{<expr><sizeof>sizeof<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>d</name></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>
</unit>

<!--
<unit language="C++">
<decl_stmt><decl><type><name>a</name></type> <name>b</name><init>={
    {1,0,{{2,0</init></decl></decl_stmt>}<srcml:error/>,<expr_stmt><expr><literal type="number">0</literal></expr></expr_stmt>}<srcml:error/>,<block>{<expr_stmt><expr><literal type="number">0</literal></expr></expr_stmt>}</block>}<srcml:error/>,
    
<block>{<expr_stmt><expr>2</expr></expr_stmt>,<block>{<block>{<expr_stmt><expr>1</expr></expr_stmt>}</block>,<block>{<expr_stmt><expr><literal type="number">0</literal></expr></expr_stmt>}</block>,<expr_stmt><expr><literal type="number">0</literal></expr></expr_stmt>}</block>,<block>{<expr_stmt><expr><literal type="number">0</literal></expr></expr_stmt>}</block>}</block>,
    
}<srcml:error/>;
</unit>
-->

<unit language="C">
<decl_stmt><decl><type><name>a</name></type> <name>b</name><init>=<expr><block>{
    <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><block>{<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,
    
<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><block>{<expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,
    
}</block></expr></init></decl>;</decl_stmt>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C">
<expr_stmt><expr><name>a</name></expr>;</expr_stmt>
<cpp:empty>#</cpp:empty>
</unit>

</unit>
