<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" language="C++" url="constructor">

<unit language="C++">
<class>class <name>A</name> <block>{<private type="default"> <constructor_decl><specifier>virtual</specifier> <name>A</name><parameter_list>()</parameter_list> = <literal type="number">0</literal>;</constructor_decl> </private>}</block>;</class>
</unit>

<unit language="C++">
<class>class <name>NonCopyable</name> <block>{<private type="default"> <constructor_decl><name>NonCopyable</name><parameter_list>()</parameter_list> = <specifier>default</specifier>;</constructor_decl> </private>}</block>;</class>
</unit>

<unit language="C++">
<class>class <name>NonCopyable</name> <block>{<private type="default"> <constructor_decl><name>NonCopyable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NonCopyable</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> = <specifier>delete</specifier>;</constructor_decl> </private>}</block>;</class>
</unit>

<unit language="C++">
<constructor><name><name>A</name><operator>::</operator><name>A</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>a</name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>}</block></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</unit>

<unit language="C++">
<constructor><name><name>A</name><operator>::</operator><name>A</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>a</name><argument_list>{}</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</unit>

<unit language="C++">
<constructor><name><name>A</name><operator>::</operator><name>A</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>a</name><argument_list>{<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>}</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</unit>

<unit language="C++">
<constructor><name><name>A</name><operator>::</operator><name>A</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>a</name><argument_list>{<argument><expr><block>{<expr><name>a</name></expr>}</block></expr></argument>}</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</unit>

<unit language="C++">
<constructor><name><name>A</name><operator>::</operator><name>A</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>a</name><argument_list>{<argument><expr><block>{<expr><name>a</name></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></argument>}</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</unit>

<unit language="C++">
<macro><name>MACRO</name></macro> <constructor><name><name>A</name><operator>::</operator><name>A</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>a</name><argument_list>()</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</unit>

<unit language="C++">
<constructor><template>template <parameter_list>&lt;<parameter><type><name>T</name></type></parameter>&gt;</parameter_list></template> <name><name><name>K</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>K</name></name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>
</unit>

<unit language="C++">
<constructor><template>template <parameter_list>&lt;<parameter><type><name>T</name></type></parameter>&gt;</parameter_list></template> <name><name><name>K</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>K</name></name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>
</unit>

<unit language="C++">
<constructor><name><name>A</name><operator>::</operator><name>A</name></name><parameter_list>()</parameter_list> <try>try <block>{<block_content/>}</block> <catch>catch<parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch></try></constructor>
</unit>

<unit language="C++">
<constructor><name><name>S</name><operator>::</operator><name>S</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <try>try <member_init_list>: <call><name>m</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
</block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch></try></constructor>
</unit>

<unit language="C++">
<constructor><name><name>HTTP</name><operator>::</operator><name>HTTP</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACE</name> <modifier>&amp;</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>number</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>website</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></constructor>
</unit>

<unit language="C++">
<constructor><name><name>A</name><operator>::</operator><name>A</name></name><parameter_list>(<parameter><decl><type><name><typename>typename</typename> <name>foo</name></name></type> <name>bar</name> <init>= <expr><call><name><typename>typename</typename> <name>foo</name></name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></constructor>
</unit>


<unit language="C++">
<constructor_decl><name><name>A</name><operator>::</operator><name>A</name></name><parameter_list>()</parameter_list>;</constructor_decl>
<expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>A</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>A</name><operator>::</operator><name>B</name><operator>.</operator><name>B</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</unit>

</unit>
