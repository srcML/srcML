<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:op="http://www.sdml.info/srcML/operator" language="C#" dir="operator" filename="operator_cs">

<unit>
<expr_stmt><expr><name>a</name> <op:operator>as</op:operator> <name>int</name></expr>;</expr_stmt>
</unit>

<unit>
<if>if<condition>(<expr><name>a</name> <op:operator>is</op:operator> <name>int</name></expr>)</condition><then>
<empty_stmt>;</empty_stmt></then></if>
</unit>

<unit>
<decl_stmt><decl><type><name>int</name> *</type> <name>i</name> =<init> <expr><op:operator>stackalloc</op:operator> <name>int</name></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name>typeof</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>i</name> <op:operator>=</op:operator> <op:operator>await</op:operator> <call><name>M</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>w</name> <op:operator>=&gt;</op:operator> <name><name>w</name><op:operator>.</op:operator><name>Length</name></name></expr>;</expr_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>T</name></type> <name>temp</name> =<init> <expr><call><name>default</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> =<init> <expr><name>x</name> <op:operator>??</op:operator> <op:operator>-</op:operator>1</expr></init></decl>;</decl_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name><name>const_cast</name><argument_list>&lt;<argument><name>type</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><name>type</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name><name>dynamic_cast</name><argument_list>&lt;<argument><name>type</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><name>type</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name><name>A</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><op:operator>::</op:operator><name>b</name></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name><name>A</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><op:operator>::</op:operator>*<name>b</name></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

</unit>
