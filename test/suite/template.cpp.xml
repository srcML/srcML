<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="template">

<unit>
<template>template <parameter_list>&lt;<param><type><name>int</name></type> <name>n</name></param>&gt;</parameter_list> <function_decl><type><name>int</name></type> <name>foo</name><parameter_list>()</parameter_list>;</function_decl></template>
</unit>

<unit>
<template>template <parameter_list>&lt;<param><type>class</type> <name>n</name></param>&gt;</parameter_list> <function_decl><type><name>int</name></type> <name>foo</name><parameter_list>()</parameter_list>;</function_decl></template>
</unit>

<unit>
<template>template <parameter_list>&lt;<param><type><name>typename</name></type> <name>n</name></param>&gt;</parameter_list> <function_decl><type><name>int</name></type> <name>foo</name><parameter_list>()</parameter_list>;</function_decl></template>
</unit>

<unit>
<template>template <parameter_list>&lt;<param><type><name>int</name></type> <name>n</name></param>, <param><type><name>double</name></type> <name>m</name></param>&gt;</parameter_list> <function_decl><type><name>int</name></type> <name>foo</name><parameter_list>()</parameter_list>;</function_decl></template>
</unit>

<unit>
<template>template <parameter_list>&lt;<param><type><name>int</name></type> <name>n</name> =<init> <expr><name>b</name></expr></init></param>&gt;</parameter_list> <function_decl><type><name>int</name></type> <name>foo</name><parameter_list>()</parameter_list>;</function_decl></template>
</unit>

<unit>
<expr_stmt><expr><call><name><name>a</name><argument_list>&lt;<argument><expr><name>b</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<function><type><specifier>virtual</specifier> <name>int</name>*</type> <name><name>f</name><argument_list>&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<decl_stmt><decl><type><name><name>a</name><argument_list>&lt;<argument><expr><name>b</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>a</name><argument_list>&lt;<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl>;</decl_stmt>
</unit>

<unit>
<template>template <parameter_list>&lt;<param><type><name>typename</name></type> <name>at_Type</name></param>&gt;</parameter_list>
<struct>struct <name><name>CTest1</name><argument_list>&lt;<argument><expr><name>at_Type</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name>
<block>{<public type="default">
</public>}</block>;</struct></template>
</unit>

<unit>
<template>template <parameter_list>&lt;<param><type><name>typename</name></type> <name>at_Type</name></param>&gt;</parameter_list>
<struct>struct <name><name>CTest1</name><argument_list>&lt;<argument><expr><name>at_Type</name></expr></argument> , <argument><expr>0</expr></argument>&gt;</argument_list></name>
<block>{<public type="default">
</public>}</block>;</struct></template>
</unit>

<unit>
<template>template <class_decl>class <name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><expr><name>MyClass</name></expr></argument>&gt;</argument_list></name></name>;</class_decl></template>
</unit>

<unit>
<template><specifier>extern</specifier> template <class_decl>class <name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><expr><name>MyClass</name></expr></argument>&gt;</argument_list></name></name>;</class_decl></template>
</unit>

<unit>
<decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><expr>1&lt;2</expr></argument>&gt;</argument_list></name></name></type> <name>a</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><expr>(1&gt;2)</expr></argument>&gt;</argument_list></name></name></type> <name>a</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><expr>((1&gt;2))</expr></argument>&gt;</argument_list></name></name></type> <name>a</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><expr>(<name>A</name> &gt; (1&gt;2))</expr></argument>&gt;</argument_list></name></name></type> <name>a</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><expr><name><name>SomeType</name><argument_list>&lt;<argument><expr>1&lt;2</expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></name></type> <name>a</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><expr><name><name>SomeType</name><argument_list>&lt;<argument><expr>(1&gt;2)</expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></name></type> <name>a</name></decl>;</decl_stmt>
</unit>

</unit>
